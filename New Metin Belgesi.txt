Programlama dili nedir?
C# gibi programlama dilleri, bilgisayarın gerçekleştirmesini istediğiniz yönergeleri yazmanızı sağlar. Her programlama dilinin farklı bir söz dizimi vardır, ancak ilk programlama dilinizi öğrenip ikinci bir dil öğrenmeye çalıştığınızda, hepsinin birçok benzer fikri paylaştığını hemen fark edersiniz. Programlama dilinin işi, bir insanın yönergeleri insan tarafından okunabilir ve anlaşılır bir şekilde yazmasına izin vermektir. Programlama dilinde yazdığınız yönergelere "kaynak kod" veya yalnızca "kod" adı verilir.

Bu noktada yazılım geliştiricisi kodu güncelleştirebilir ve değiştirebilir, ancak bilgisayar kodu anlayamaz. İlk olarak kod, bilgisayarın anlayabileceği bir biçimde derlenmelidir .

Derleme nedir?
Derleyici adlı özel bir program, kaynak kodunuzu bilgisayarın CPU'sunun yürütebileceği farklı bir biçime dönüştürür. Önceki ünitede yeşil Çalıştır düğmesini kullandığınızda, yazdığınız kod önce derlendi, sonra yürütüldü.

Kodumuzu neden derlememiz gerekiyor? Bilgisayar dillerinin çoğu başlangıçta şifreli gibi görünse de, bunlar bilgisayarın tercih ettiği dille karşılaştırıldığında insanlar tarafından daha kolay anlaşılabilir. Çünkü bilgisayarın tercih ettiği dil binlerce veya milyonlarca küçük anahtar açılarak veya kapatılarak ifade edilir. Derleyiciler insanlar tarafından okunabilen yönergeleri bilgisayar tarafından anlaşılabilen yönerge kümesine çevirerek iki dünya arasında köprü kurar.

Söz dizimi nedir?
Bir bilgisayar dilinin söz dizimi, derleyicinin zorunlu tuttuğu anahtar sözcükleri, işleçleri (noktalı virgül veya parantez gibi özel klavye karakterleri) ve diğer dil bilgisi kurallarını içerir. Yazdığınız kod satırları bir düzine kadar söz dizimi kuralına uygundur ve bu satırlarda en az dört farklı işleç kullanılmıştır. Öğrenecek çok şey var, ancak neyse ki her kavram basittir. Vazgeçmeyin! Öğrenebilirsiniz!

.NET Düzenleyicisi'ne kod girdiğinizde, farklı sözcüklerin ve simgelerin renginde küçük değişiklikler fark etmiş olabilirsiniz. Söz dizimi vurgulama, kodunuzda C# söz dizimi kurallarına uymayan hataları kolayca tespit etmek için kullanmaya başlayacağınız yararlı bir özelliktir. Aslında Visual Studio Code'da ve tam Visual Studio IDE'de bu özelliğin benzer (ve hatta daha güçlü) bir sürümü sağlanır.


-WriteLine() bölümü yöntem olarak adlandırılır. Bir yöntemi her zaman fark edebilirsiniz çünkü bundan sonra bir parantez kümesi vardır. ancak bir yöntemi çağırmak istiyorsanız, yöntemin adından sonra her zaman parantezleri kullanmanız gerekir. Parantezler yöntem çağırma işleci olarak bilinir. 
-Console bölümü sınıf olarak adlandırılır. Sınıflar "kendi" yöntemleri; veya belki de bunu söylemenin daha iyi bir yolu, yöntemlerin bir sınıfın içinde yaşadığıdır.
-Sınıf adını ve yöntem adını ConsoleWriteLine()ayıran bir nokta veya nokta da vardır. Nokta üye erişim işlecidir. Diğer bir deyişle nokta, bir sınıftan o sınıfın yöntemlerinden birine nasıl "gidileceğini" gösterir.
-Son olarak, noktalı virgül deyiminin sonu işlecidir. Deyim C# dilinde tam bir yönergedir. Noktalı virgül, derleyiciye komutu girmeyi tamamladığınızı bildirir.

test :  This is the first line.
	   This is the second line.

Sabit değer nedir?
Sabit değer hiçbir zaman değişmeyen sabit kodlanmış değerdir. Önceki bir modülde Çıkış bölmesine sabit bir dize görüntüledik. Diğer bir deyişle, Çıkış penceresinde tam olarak şu alfasayısal karakterler dizesinin görüntülenmesini istedik: H, e, l, l, o vb.

Dize veri türü, hesaplama için değil, sunu için alfasayısal sözcükleriniz, tümcecikleriniz veya verileriniz olduğunda kullanılır; bir dakika içinde bu konuda daha fazla bilgi.

string sunu için hesaplama yerine sözcükler, tümcecikler veya alfasayısal veriler için
char tek bir alfasayısal karakter için
int tamsayı için
decimal ondalık içeren bir sayı için
bool true/false değeri için

Değişken nedir?
Değişken, kullanım ömrü boyunca değerini değiştirebilen bir veri öğesidir. Kodunuzda daha sonra kullanmayı planladığınız değerleri geçici olarak depolamak için değişkenleri kullanabilirsiniz. Değişken, bilgisayar bellek adresine atayabildiğimiz kolay bir etikettir. Bir değeri geçici olarak bu bellek adresinde depolamak istediğimizde veya bellek adresinde depolanan değeri almak istediğimizde yalnızca oluşturduğumuz değişken adını kullanacağız.

Değişkenler bilgisayarın belleğinde depoladığınız geçici değerlerdir.
Bir değişkeni kullanabilmeniz için önce bildirmeniz gerekir.
Değişken bildirmek için önce depolamak istediğiniz veri türü için bir veri türü seçin, ardından değişkene kurallara uygun bir ad verin.


Örtülü olarak belirtilmiş yerel değişkenler nedir?
Örtülü olarak belirtilmiş yerel değişken, C# derleyicisine türü çıkarsamasını bildiren var anahtar sözcüğü kullanılarak oluşturulur. Tür çıkarıldıktan sonra, değişkeni bildirmek için gerçek veri türünü kullanmış olmanızla aynıdır.

"Bob" adını tutmak için string türünde bir değişken.
ileti sayısını depolamak için int türünde bir değişken.
sıcaklığı depolamak için decimal türünde bir değişken.



